import React, { useState, useEffect } from 'react';
import { Modal, Form, Select, DatePicker, TimePicker, Input, Radio, Row, Col, message, Divider, Card, Space, Tag } from 'antd';
import { CarOutlined, HomeOutlined, EnvironmentOutlined, ClockCircleOutlined, UserOutlined, PhoneOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';
import { getAvailableDayTours } from '../../../api/tourSchedule';

const { Option } = Select;
const { TextArea } = Input;

const AddExtraScheduleModal = ({ visible, onCancel, onConfirm, orderInfo, loading }) => {
  const [form] = Form.useForm();
  const [scheduleType, setScheduleType] = useState('pickup'); // pickup, dropoff, extra_day
  const [dayTours, setDayTours] = useState([]);
  const [loadingDayTours, setLoadingDayTours] = useState(false);

  // ÂàùÂßãÂåñË°®ÂçïÊï∞ÊçÆ
  useEffect(() => {
    if (visible && orderInfo) {
      // Ê†πÊçÆËÆ¢Âçï‰ø°ÊÅØÈ¢ÑÂ°´Ë°®Âçï
      form.setFieldsValue({
        contactPerson: orderInfo.name || orderInfo.contactPerson,
        contactPhone: orderInfo.phone || orderInfo.contactPhone,
        adultCount: orderInfo.adultCount || 1,
        childCount: orderInfo.childCount || 0,
        scheduleType: 'pickup',
        // ÈªòËÆ§Êó∂Èó¥ËÆæÁΩÆ
        pickupTime: dayjs('08:00', 'HH:mm'),
        dropoffTime: dayjs('18:00', 'HH:mm')
      });
      setScheduleType('pickup');
    }
  }, [visible, orderInfo, form]);

  // Âä†ËΩΩ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅÂàóË°®
  const loadDayTours = async () => {
    if (dayTours.length > 0) return; // Â¶ÇÊûúÂ∑≤ÁªèÂä†ËΩΩËøáÔºå‰∏çÈáçÂ§çÂä†ËΩΩ
    
    try {
      setLoadingDayTours(true);
      const response = await getAvailableDayTours();
      if (response.code === 1) {
        setDayTours(response.data || []);
      } else {
        message.error('Ëé∑Âèñ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅÂàóË°®Â§±Ë¥•');
      }
    } catch (error) {
      console.error('Ëé∑Âèñ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅÂàóË°®Â§±Ë¥•:', error);
      message.error('Ëé∑Âèñ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅÂàóË°®Â§±Ë¥•');
    } finally {
      setLoadingDayTours(false);
    }
  };

  // Â§ÑÁêÜË°åÁ®ãÁ±ªÂûãÂèòÂåñ
  const handleScheduleTypeChange = (e) => {
    const newType = e.target.value;
    setScheduleType(newType);
    
    // Â¶ÇÊûúÈÄâÊã©‰∫ÜÈ¢ùÂ§ñ‰∏ÄÊó•Ê∏∏ÔºåÂä†ËΩΩ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅÂàóË°®
    if (newType === 'extra_day') {
      loadDayTours();
    }
  };

  // Â§ÑÁêÜÁ°ÆËÆ§
  const handleOk = async () => {
    try {
      const values = await form.validateFields();
      
      // Â¶ÇÊûúÊòØÈ¢ùÂ§ñ‰∏ÄÊó•Ê∏∏ÔºåËé∑ÂèñÈÄâ‰∏≠ÁöÑ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ‰ø°ÊÅØ
      let selectedTourInfo = null;
      if (scheduleType === 'extra_day' && values.tourId) {
        selectedTourInfo = dayTours.find(tour => tour.id === values.tourId);
        console.log('üéØ ÈÄâ‰∏≠ÁöÑ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ:', selectedTourInfo);
      }
      
      // ÁªÑË£ÖÊï∞ÊçÆ
      const scheduleData = {
        ...values,
        orderInfo,
        bookingId: orderInfo.bookingId || orderInfo.id,
        orderNumber: orderInfo.orderNumber,
        scheduleType: scheduleType,
        selectedTourInfo: selectedTourInfo, // ‰º†ÈÄíÈÄâ‰∏≠ÁöÑ‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ‰ø°ÊÅØ
        // Ê†ºÂºèÂåñÊó∂Èó¥
        pickupTime: values.pickupTime?.format('HH:mm'),
        dropoffTime: values.dropoffTime?.format('HH:mm'),
        scheduleDate: values.scheduleDate?.format('YYYY-MM-DD')
      };
      
      console.log('ÂáÜÂ§á‰øùÂ≠òÈ¢ùÂ§ñË°åÁ®ã:', scheduleData);
      
      // Ë∞ÉÁî®Áà∂ÁªÑ‰ª∂ÁöÑÁ°ÆËÆ§ÂõûË∞É
      if (onConfirm) {
        await onConfirm(scheduleData);
      }
      
    } catch (error) {
      console.error('Ë°®ÂçïÈ™åËØÅÂ§±Ë¥•:', error);
    }
  };

  // Â§ÑÁêÜÂèñÊ∂à
  const handleCancel = () => {
    form.resetFields();
    setScheduleType('pickup');
    onCancel();
  };

  // Ê†πÊçÆË°åÁ®ãÁ±ªÂûãÊ∏≤Êüì‰∏çÂêåÁöÑË°®ÂçïÈ°π
  const renderScheduleTypeFields = () => {
    switch (scheduleType) {
      case 'pickup':
        return (
          <>
            <Form.Item
              name="pickupLocation"
              label="Êé•Êú∫Âú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Êé•Êú∫Âú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<EnvironmentOutlined />}
                placeholder="Â¶ÇÔºöÊú∫Âú∫„ÄÅÈÖíÂ∫óÂêçÁß∞Á≠â"
              />
            </Form.Item>
            <Form.Item
              name="pickupTime"
              label="Êé•Êú∫Êó∂Èó¥"
              rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Êé•Êú∫Êó∂Èó¥' }]}
            >
              <TimePicker 
                format="HH:mm"
                placeholder="ÈÄâÊã©Êó∂Èó¥"
                style={{ width: '100%' }}
              />
            </Form.Item>
            <Form.Item
              name="dropoffLocation"
              label="ÈÄÅËá≥Âú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÈÄÅËá≥Âú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<HomeOutlined />}
                placeholder="Â¶ÇÔºöÈÖíÂ∫óÂêçÁß∞„ÄÅÊôØÁÇπÁ≠â"
              />
            </Form.Item>
          </>
        );
      case 'dropoff':
        return (
          <>
            <Form.Item
              name="pickupLocation"
              label="Êé•ÈÄÅÂú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Êé•ÈÄÅÂú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<HomeOutlined />}
                placeholder="Â¶ÇÔºöÈÖíÂ∫óÂêçÁß∞„ÄÅÊôØÁÇπÁ≠â"
              />
            </Form.Item>
            <Form.Item
              name="dropoffLocation"
              label="ÈÄÅÊú∫Âú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÈÄÅÊú∫Âú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<EnvironmentOutlined />}
                placeholder="Â¶ÇÔºöÊú∫Âú∫Á≠â"
              />
            </Form.Item>
            <Form.Item
              name="dropoffTime"
              label="ÈÄÅÊú∫Êó∂Èó¥"
              rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÈÄÅÊú∫Êó∂Èó¥' }]}
            >
              <TimePicker 
                format="HH:mm"
                placeholder="ÈÄâÊã©Êó∂Èó¥"
                style={{ width: '100%' }}
              />
            </Form.Item>
          </>
        );
      case 'extra_day':
        return (
          <>
            <Form.Item
              name="tourId"
              label="ÈÄâÊã©‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ"
              rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ' }]}
            >
              <Select 
                placeholder="ËØ∑ÈÄâÊã©‰∏ÄÊó•Ê∏∏‰∫ßÂìÅ"
                loading={loadingDayTours}
                showSearch
                filterOption={(input, option) =>
                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                }
              >
                {dayTours.map(tour => (
                  <Option key={tour.id} value={tour.id}>
                    {tour.name} - {tour.location} (${tour.price})
                  </Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item
              name="pickupLocation"
              label="Âá∫ÂèëÂú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Âá∫ÂèëÂú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<HomeOutlined />}
                placeholder="Â¶ÇÔºöÈÖíÂ∫óÁ≠â"
              />
            </Form.Item>
            <Form.Item
              name="pickupTime"
              label="Âá∫ÂèëÊó∂Èó¥"
              rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Âá∫ÂèëÊó∂Èó¥' }]}
            >
              <TimePicker 
                format="HH:mm"
                placeholder="ÈÄâÊã©Êó∂Èó¥"
                style={{ width: '100%' }}
              />
            </Form.Item>
            <Form.Item
              name="dropoffLocation"
              label="ÁõÆÁöÑÂú∞ÁÇπ"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÁõÆÁöÑÂú∞ÁÇπ' }]}
            >
              <Input 
                prefix={<EnvironmentOutlined />}
                placeholder="Â¶ÇÔºöÊôØÁÇπ„ÄÅÈÖíÂ∫óÁ≠â"
              />
            </Form.Item>
            <Form.Item
              name="dropoffTime"
              label="ÁªìÊùüÊó∂Èó¥"
              rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÁªìÊùüÊó∂Èó¥' }]}
            >
              <TimePicker 
                format="HH:mm"
                placeholder="ÈÄâÊã©Êó∂Èó¥"
                style={{ width: '100%' }}
              />
            </Form.Item>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <Modal
      title={
        <Space>
          <CarOutlined />
          ‰∏∫ËÆ¢ÂçïÊ∑ªÂä†È¢ùÂ§ñË°åÁ®ã
        </Space>
      }
      open={visible}
      onOk={handleOk}
      onCancel={handleCancel}
      confirmLoading={loading}
      width={700}
      okText="Á°ÆËÆ§Ê∑ªÂä†"
      cancelText="ÂèñÊ∂à"
      destroyOnClose
    >
      {/* ËÆ¢Âçï‰ø°ÊÅØÂ±ïÁ§∫ */}
      {orderInfo && (
        <Card size="small" style={{ marginBottom: 16, backgroundColor: '#f6ffed' }}>
          <Row gutter={16}>
            <Col span={12}>
              <Space>
                <UserOutlined />
                <strong>ÂÆ¢Êà∑Ôºö</strong>{orderInfo.name || orderInfo.contactPerson}
              </Space>
            </Col>
            <Col span={12}>
              <Space>
                <PhoneOutlined />
                <strong>ÁîµËØùÔºö</strong>{orderInfo.phone || orderInfo.contactPhone}
              </Space>
            </Col>
          </Row>
          <Row gutter={16} style={{ marginTop: 8 }}>
            <Col span={12}>
              <strong>ËÆ¢ÂçïÂè∑Ôºö</strong>{orderInfo.orderNumber}
            </Col>
            <Col span={12}>
              <strong>‰∫∫Êï∞Ôºö</strong>
              <Tag color="blue">Êàê‰∫∫ {orderInfo.adultCount || 0}</Tag>
              <Tag color="green">ÂÑøÁ´• {orderInfo.childCount || 0}</Tag>
            </Col>
          </Row>
        </Card>
      )}

      <Form
        form={form}
        layout="vertical"
        size="middle"
      >
        {/* Ë°åÁ®ãÁ±ªÂûãÈÄâÊã© */}
        <Form.Item
          name="scheduleType"
          label="Ë°åÁ®ãÁ±ªÂûã"
          rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Ë°åÁ®ãÁ±ªÂûã' }]}
        >
          <Radio.Group 
            onChange={handleScheduleTypeChange}
            buttonStyle="solid"
            size="large"
          >
            <Radio.Button value="pickup">
              <CarOutlined /> ÊèêÂâçÊé•Êú∫
            </Radio.Button>
            <Radio.Button value="dropoff">
              <EnvironmentOutlined /> Âª∂ÂêéÈÄÅÊú∫
            </Radio.Button>
            <Radio.Button value="extra_day">
              <ClockCircleOutlined /> È¢ùÂ§ñ‰∏ÄÊó•Ê∏∏
            </Radio.Button>
          </Radio.Group>
        </Form.Item>

        {/* Ë°åÁ®ãÊó•Êúü */}
        <Form.Item
          name="scheduleDate"
          label="Ë°åÁ®ãÊó•Êúü"
          rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Ë°åÁ®ãÊó•Êúü' }]}
        >
          <DatePicker 
            style={{ width: '100%' }}
            placeholder="ÈÄâÊã©Êó•Êúü"
            disabledDate={(current) => current && current < dayjs().startOf('day')}
          />
        </Form.Item>

        <Divider orientation="left">Ë°åÁ®ãËØ¶ÊÉÖ</Divider>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              name="contactPerson"
              label="ËÅîÁ≥ª‰∫∫"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ËÅîÁ≥ª‰∫∫' }]}
            >
              <Input prefix={<UserOutlined />} placeholder="ËÅîÁ≥ª‰∫∫ÂßìÂêç" />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              name="contactPhone"
              label="ËÅîÁ≥ªÁîµËØù"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ËÅîÁ≥ªÁîµËØù' }]}
            >
              <Input prefix={<PhoneOutlined />} placeholder="ËÅîÁ≥ªÁîµËØù" />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              name="adultCount"
              label="Êàê‰∫∫Êï∞Èáè"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Êàê‰∫∫Êï∞Èáè' }]}
            >
              <Select placeholder="ÈÄâÊã©Êàê‰∫∫Êï∞Èáè">
                {[...Array(10).keys()].map(i => (
                  <Option key={i} value={i}>{i} ‰∫∫</Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              name="childCount"
              label="ÂÑøÁ´•Êï∞Èáè"
              rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÂÑøÁ´•Êï∞Èáè' }]}
            >
              <Select placeholder="ÈÄâÊã©ÂÑøÁ´•Êï∞Èáè">
                {[...Array(10).keys()].map(i => (
                  <Option key={i} value={i}>{i} ‰∫∫</Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        {/* Ê†πÊçÆË°åÁ®ãÁ±ªÂûãÊ∏≤Êüì‰∏çÂêåÁöÑÂ≠óÊÆµ */}
        {renderScheduleTypeFields()}

        {/* ÁâπÊÆäË¶ÅÊ±Ç */}
        <Form.Item
          name="specialRequests"
          label="ÁâπÊÆäË¶ÅÊ±Ç"
        >
          <TextArea
            rows={3}
            placeholder="ËØ∑ËæìÂÖ•ÁâπÊÆäË¶ÅÊ±ÇÊàñÂ§áÊ≥®ÔºàÈÄâÂ°´Ôºâ"
            maxLength={500}
            showCount
          />
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default AddExtraScheduleModal; 